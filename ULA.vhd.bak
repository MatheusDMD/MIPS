library IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ULA is
    Port ( 	  A :  in  std_logic_vector(32 downto 0);
				  B :  in  std_logic_vector(32 downto 0);
			  invA :  in  std_logic;
			  invB :  in  std_logic;
				Sel :  in  std_logic_vector(1 downto 0);
				RES :  out signed (std_logic_vector(32 downto 0));
			  ZERO :  out std_logic_vector(32 downto 0);
       overflow :  out std_logic
   );
end entity;

architecture comportamento of ULA_MIPS is
	signal A2, B2: std_logic_vector(32 downto 0);
	begin
	  process (A, B, Sel, invA, invB) is
	  begin
			-- INVERT INPUTS: SUBTRACT/NAND/NOR
			if(invA = '1') then
				A2 <= not(A);
			else
				A2 <=A;
			end if;
			if(invB = '1') then
				B2 <= not(B);
			else
				B2 <=B;
			end if;
			
			case Sel is
				when "00" => RES <= signed (std_logic_vector(A2 AND B2));
				when "01" => RES <= signed (std_logic_vector(A2 AND B2));
				when "10" => RES <= signed (std_logic_vector(signed(std_logic_vector(signed(A2) + signed(B2)))));
				when "11" => RES <= signed (
								(((NOT std_logic_vector(signed(std_logic_vector(signed(A2) + signed(B2))))) AND 
								(signed(A2) AND signed(B2))) OR
								((std_logic_vector(signed(std_logic_vector(signed(A2) + signed(B2))))) AND 
								((NOT signed(A2)) AND (NOT signed(B2))))) --OVERFLOW
								
								
								);
			end case;
			

	  end process;
	nor32 : entity work.nor32
	port map (A => RES, O => ZERO);
end architecture;